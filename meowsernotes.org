* Phase 1 Project
** Title
<2022-06-08 Wed 17:50>: Here are some ideas I have:
- Find My Pet: Too much of a connotation with a lost pet, not necessarily a new one, sounds like a downer
- Jacques Sitter: Too ambitious, would need to combine multiple APIs together to include actual pet sitting capability
- Petster: Not bad, but I think its already taken --> Yep, it's already taken
- Meowser: This was the final name I decided upon as I had this in the back of my mind for quite some time

** Ideas
<2022-06-08 Wed 17:52>: Here are my ideas:
- This would be a mobile responsive webpage that would incorporate two things
- 1. The ability to have a search bar to actively call the 'Petfinder' API for the top 10 results (this is to prevent it from the API key itself being banned)
- 2. A tie-in to Google Maps with an additional map section to find pets by location

** Layout
<2022-06-08 Wed 18:14>: My design will be heavily influenced via Rover's online website (https://www.rover.com/search/) for these reasons:
- It's responsive
- It makes sense
- The map is on the right with corresponding pins
- There are 10 results per page with card results

** Borrowind CSS For The Top Searchbar
<2022-06-11 Sat 16:32>: I took the searchbar from this particular example site:
- https://bbbootstrap.com/snippets/awesome-search-bar-hover-button-using-html-and-css-96470765

** How I Was Able To Convert The 'PetFinder' API's 'cURL' Example Into A 'fetch()' Request
<2022-06-11 Sat 16:57>: I used this site which converts a 'cURL' request to a 'fetch()' request for the use in my project:
- https://kigiri.github.io/fetch/

** How I Attempted To Convert The Project Into A NodeJS App To Avoid 'CORS' Error
<2022-06-11 Sat 16:05>: I had to deal with the annoying 'CORS' error which is defined within this Wikipedia article:
- https://en.wikipedia.org/wiki/Cross-origin_resource_sharing

After a bit of research, I found this particular blog post to be useful:
- https://stackabuse.com/handling-cors-with-node-js/

With this in mind, I used these commands accordingly:
#+begin_src bash
npm i --save express
npm i --save cors
#+end_src

I then used this guide to also help tweak the 'express.js' ideas so that 'meowser.html' is served at the default route for the project:
- https://www.digitalocean.com/community/tutorials/use-expressjs-to-deliver-html-files

I then had to use this 'path' Docs page from Node.JS in order to figure out how to properly use the path.join() function appropriately:
- https://nodejs.org/api/path.html

I then found this StackOverflow post on how to properly find the parent folder accordingly with '__dirname' in this context:
- https://stackoverflow.com/questions/7083045/fs-how-do-i-locate-a-parent-folder

<2022-06-11 Sat 16:46>: I tried referring to the following pages to be able to use 'express.static' to serve static files accordingly:
- http://expressjs.com/en/api.html#express.static

I saw this StackOverflow post as an edge case if the 'public' option for 'express.static' doesn't work out:
- https://stackoverflow.com/questions/58115695/how-to-detect-404-errors-from-express-static

I then referred to this 'expressjs' Docs page so that I can serve both the 'assets' and 'src' folder accordingly:
- https://expressjs.com/en/starter/static-files.html

<2022-06-11 Sat 16:53>: I noticed I was receiving these errors when trying to run my app locally:
#+begin_src bash
Refused to apply style from 'http://localhost:8080/assets/css/meowser.css' because its MIME type ('text/html') is not a supported stylesheet MIME type, and strict MIME checking is enabled.
meowser:21          GET http://localhost:8080/images/pawprint.png 404 (Not Found)
meowser:75          GET http://localhost:8080/src/js/test.js net::ERR_ABORTED 404 (Not Found)
#+end_src

I then did research and found this StackOverflow post:
- https://stackoverflow.com/questions/48778619/node-express-refused-to-apply-style-because-its-mime-type-text-html

I also found this random GitHub issue page that details how to use 'app.use(express.static())' to serve static files in the context of ExpressJS:
- https://github.com/nasa/openmct/issues/3159

I then tried using these two specific lines within my JS script so that I could make sure that the 'assets' directory containing the CSS stylesheets, and the 'src' directory containing my main JS script would be recognized by ExpressJS:
#+begin_src js
app.use(express.static(path.join(__dirname, "assets")));
app.use(express.static(path.join(__dirname, "src")));
#+end_src

<2022-06-11 Sat 16:58>: I am still unable to figure out why using 'app.use(express.static())' is not solving the issue of being able to host assets for the CSS stylesheet and the JS script for my project.

** Shifted Focus To Not Create An ExpressJS App
<2022-06-11 Sat 17:36>: Due to complexities of having to deal with 'CORS' issues with the required authentication for the 'PetFinder' API, I decided to shift focus to just make a simple cat breed fetcher type app that would allow you to browse cats in your web browser based upon their breed.

With this in mind, I removed the 'ExpressJS' and other NodeJS components from the project itself to make sure I can complete the project on time.

<2022-06-11 Sat 18:29>: I then decided to utilize 'db.json' by obtaining the list of cat breeds from Wikipedia via this link:
- https://en.wikipedia.org/wiki/List_of_cat_breeds

To then better suit the output required by 'db.json', I decided to use the following code snippet in the browser's console to obtain the object output I needed:

#+begin_src js
let breedNamesList = document.querySelectorAll("th a");

breedNamesList.forEach((breedName) => {
    console.log("{");
    console.log('"name": "', breedName.textContent, '"');
    console.log('"link": "', breedName.href, '"');
    console.log("},");
})
#+end_src

<2022-06-11 Sat 19:03>: I then got the images separately by using the following code snippet in the browser's console:
#+begin_src js
let breedImages = document.querySelectorAll("td a img");

breedImages.forEach((breed) => {
    console.log('"imageAlt": "', breed.alt, '"');
    console.log('"imageSrc": "', breed.src, '"');
});
#+end_src

<2022-06-11 Sat 19:42>: I then placed these results back into 'db.json' individually, and noticed some syntax issues.

I found a related online JSON linter, and discovered there was a trailing comma:
- https://jsonformatter.curiousconcept.com/#

<2022-06-11 Sat 19:53>: My goals going forward include the following:
- Allow the user to pick from the dropdown menu in 'Step 1'
- Then, allow them to enter an optional phrase
- Then, attempt to find a cat photo
- If a photo cannot be found from this site:
- https://cataas.com/#/
- Then, default to one of the default ones from the Wikipedia listing as the 'tag' is probably too broad for the site:
- https://en.wikipedia.org/wiki/List_of_cat_breeds
- Optional:
- Maybe include a random one from this example:
- https://codepen.io/Chanadian/pen/jxRWvg
- Which is really being derived from 'thecatapi.com' without an API key:
- https://thecatapi.com/api/images/get?format=src&type=gif

** Shifting Focus Of App To Be More Wikipedia Focused
<2022-06-12 Sun 12:52>: Since the 'catasas.com' site really isn't contingent on having each cat image tagged with a breed, this doesn't help me with my project.

I then did more research and found a better list of free APIs to use:
- https://github.com/toddmotto/public-apis

So, since I already have a list of cat breeds from Wikipedia, I can then attempt to utilize their API in that case to just grab the related article given the name of the cat breed itself.

The related API in this case is the 'MediaWiki' API:
- https://www.mediawiki.org/wiki/API:Get_the_contents_of_a_page#Method_3:_Use_the_TextExtracts_API

For an additional fun layer, I can utilize this API regarding cat facts as well:
- https://alexwohlbruck.github.io/cat-facts/

<2022-06-12 Sun 13:39>: After doing a bit more research, I found the breakdown page of the 'MediaWiki' related API clients that exist, as well as their related API page, and corresponding sandbox page
- https://www.mediawiki.org/wiki/API:Client_code
- https://doc.wikimedia.org/mediawiki-core/master/js/#!/api/mw.Api
- https://en.wikipedia.org/wiki/Special:ApiSandbox#action=help&format=json&recursivesubmodules=1

This is the more specific JS specific REST API for 'MediaWiki':
- https://doc.wikimedia.org/mediawiki-core/master/js/#!/api/mw.Rest

<2022-06-12 Sun 13:51>: I found a more specific set of JavaScript centered examples tailored to the 'MediaWiki' API:
- https://github.com/wikimedia/mediawiki-api-demos/tree/master/javascript

<2022-06-12 Sun 13:56>: Just in case, here is how to grab the Wikipedia article links from the breed list (https://en.wikipedia.org/wiki/List_of_cat_breeds):
#+begin_src js
let breedWikiLinks = document.querySelectorAll("th a");

breedWikiLinks.forEach((breedWikiLink) => {
    console.log('"wikiArticleLink": "', breedWikiLink.href, '"');
})
#+end_src

<2022-06-12 Sun 14:35>: My current thinking for how the 'View Cat Image(s)' functionality will work is as follows:
- The web app will attempt to make an API call to the 'MediaWiki' site's REST API
- If an image is unable to be produced for whatever reason, it will default to whatever is present

<2022-06-12 Sun 15:20>: I then utilized this example from the 'MediaWiki' API examples GitHub page so that I can obtain the images from the given Wikipedia article:
- https://github.com/wikimedia/mediawiki-api-demos/blob/master/javascript/get_page_images.js

<2022-06-12 Sun 15:27>: I wasn't able to get that working yet, but I tried working on making sure the 'Cat Facts API' portion of the project working:
- https://alexwohlbruck.github.io/cat-facts/docs/

However, I am now facing this particular error:
#+begin_src js
Uncaught (in promise) TypeError: Cannot set properties of null (setting 'textContent')
    at meowser.js:103:50
#+end_src

<2022-06-13 Mon 18:43>: I am still facing the annoying CORS error:
#+begin_src bash
Access to fetch at 'https://en.wikipedia.org/wiki/Abyssinian_cat?origin=*&action=query&prop=images&titles=https://en.wikipedia.org/wiki/Abyssinian_cat&format=json' from origin 'null' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.
#+end_src

With some research, you can use a middle proxy in this scenario as per this article:
- https://diyifang.medium.com/no-access-control-allow-origin-header-is-present-on-the-requested-resource-when-fetching-api-32fdc56efd0f

Some 'proxy' web apps to use:
- https://cors-anywhere.herokuapp.com/
- https://api.allorigins.win/raw?url=

<2022-06-13 Mon 19:55>: Since I'm still a bit struggling to figure out the CORS issue even with my attempt below:
#+begin_src js
        fetch(apiURL, {
            method: "GET",
            headers: {
                "Access-Control-Allow-Origin": "*",
                "mode": "cors"
            },
        })
#+end_src

I then decided to instead focus on design efforts, and utilized 'Palleton' to create a central color scheme around the colors of green, black, sand, and silver:
- https://paletton.com/#uid=31b1f1k00tA2wr604o10mj11wexk632C529t3H4j8C1Mb018kAb++cyYLjxZq++GC++vT

<2022-06-13 Mon 20:26>: I also tried to get a 'CORS' browser extension but it simply isn't working to resolve the 'CORS' issue present unfortunately:
- https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf?hl=en

<2022-06-14 Tue 18:13>: I tried to do more research on the 'CORS' issue present and found this Stack Overflow post:
- https://stackoverflow.com/questions/32500073/request-header-field-access-control-allow-headers-is-not-allowed-by-itself-in-pr

I tried applying it to the project via this snippet, but this still didn't resolve the problem:
#+begin_src js
        fetch(apiURL, {
            method: "GET",
            headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "GET,HEAD,OPTIONS,POST,PUT",
                "Access-Control-Allow-Headers": "Origin, X-Requested-With, Content-Type, Accept, Authorization"
            },
        })
#+end_src

<2022-06-15 Wed 19:24>: I then realized that the API URL was absolutely incorrect.

The desireable example URL is the following:
- https://en.wikipedia.org/w/api.php?origin=*&action=query&prop=images&titles=Abyssinian_cat&format=json

This means that I would need to rip out the 'titles' parameter from the corresponding Wikipedia article so that I am only left with the 'titles' parameter value:
- https://en.wikipedia.org/wiki/Abyssinian_cat

I did this by converting the link itself, 'breedLink' to a string with the .toString() method, and then used a .replace() statement afterwards to replace the first portion of the link, '' with a space:
#+begin_src js
let splitBreedName = breedLink.toString().replace("https://en.wikipedia.org/wiki/", " ");
#+end_src

<2022-06-15 Wed 19:28>: I then later faced a weird issue involving space characters in which the returned 'imageTitle' from the fixed API call would sometimes return a file name that had a space present such as the following:
#+begin_src text
File:Gustav chocolate.jpg
#+end_src

To compensate for this, I had to use the global '/g' flag to indicate that I wanted to replace the entire string's contents of any matched space with a '%20' sequence so that I can later utilize it as a URL since URLs do not utilize spaces:
#+begin_src js
imageTitle = imageTitle.replace(/ /g, "%20");
#+end_src

<2022-06-16 Thu 16:00>: After a bit of research, I determined that the issue is that the second API call is resulting in a fuzzy search.

Therefore, I need to read on API docs how to further configure the 'aifrom' parameter properly as its only doing a fuzzy search:
- https://www.mediawiki.org/wiki/API:Main_page

<2022-06-16 Thu 18:26>: I looked into this further and found a great example of how to implement this:
- https://www.mediawiki.org/wiki/API:Picture_of_the_day_viewer

However, the only problem with this is that its written in Python 3, but the premise is largely the same:
- Use the title of the Wikipedia page to grab JSON output for images present
- Then, use a separate function, 'fetch_image_src()' to make another API call so that you can obtain an 'img_src' to use for an actual image.

In my scenario however, to make sure I get this done on time, I have already fulfilled the requirement of utilizing a single API.

Therefore, if I am so inclined later, I can implement the functionality of completely revitalizing this project with the ability of grabbing images from a specific Wikipedia page for later display.

<2022-06-16 Thu 18:28>: For now, I will scale back the project so that it rips the 'img_src' from the 'db.json' entry to make it easier.
